rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isModerator() {
      // Moderator can be identified either by UID or email
      let moderatorUids = ['yx9Kk8iB76ZmZfuFdoY7VzIkO5w2', 'yx9Kk8iB76ZmZfuFdoY7VzIkO5w2'];
      let moderatorEmails = ['incredibles23507@gmail.com'];
      
      return request.auth != null && (
        request.auth.uid in moderatorUids || 
        request.auth.token.email in moderatorEmails
      );
    }

    match /assignmentRequests/{requestId} {
      allow read: if isSignedIn();

      allow create: if isSignedIn()
        && request.resource.data.authorId == request.auth.uid;

      // Only the author can update a request
      allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
      allow delete: if false;
    }

    // Rules for the marketplace listings
    match /marketListings/{listingId} {
      // Anyone who is signed in can read marketplace listings
      allow read: if isSignedIn();

      // Only signed-in users can create listings, and they must include their user ID
      allow create: if isSignedIn()
        && request.resource.data.sellerId == request.auth.uid
        && request.resource.data.createdAt != null;

      // Only the seller can update their listing
      allow update: if isSignedIn() 
        && resource.data.sellerId == request.auth.uid;
        
      // Don't allow deletion for now - just mark as sold
      allow delete: if false;
    }

    // Rules for Lost & Found items
    match /lostAndFoundItems/{itemId} {
      // Anyone who is signed in can read lost & found items
      allow read: if isSignedIn();

      // Only signed-in users can create items, and they must include their user ID
      allow create: if isSignedIn()
        && request.resource.data.reportedBy.uid == request.auth.uid
        && request.resource.data.createdAt != null;

      // Only the person who reported the item can update it
      allow update: if isSignedIn() 
        && resource.data.reportedBy.uid == request.auth.uid;
        
      // Don't allow deletion - items should be marked as resolved
      allow delete: if false;
    }
    
    // === ESPORTS & EVENTS SECURITY RULES ===
    match /events/{eventId} {
      // Any signed-in user can view approved events
      allow read: if isSignedIn();

      // Any signed-in user can CREATE an event, but ONLY IF
      // they are setting the status to "pending_approval"
      allow create: if isSignedIn()
                    && request.resource.data.status == "pending_approval"
                    && request.resource.data.submittedBy.uid == request.auth.uid;

      // Only designated moderators can UPDATE an event (i.e., approve/reject it)
      // OR the submitter can update their own event, but cannot change its status
      allow update: if isSignedIn() 
                    && (isModerator()
                    || (resource.data.submittedBy.uid == request.auth.uid 
                        && !(request.resource.data.status != resource.data.status)));

      // Only moderators can DELETE events
      allow delete: if isSignedIn() && isModerator();
    }

    // Rules for Chat System - Simplified for testing
    match /chats/{chatId} {
      // Allow all operations if user is signed in (we'll tighten this later)
      allow read, write: if isSignedIn();

      // Messages subcollection
      match /messages/{messageId} {
        // Allow all operations if user is signed in (we'll tighten this later)
        allow read, write: if isSignedIn();
      }
    }

    // Rules for Notifications System
    match /notifications/{notificationId} {
      // A user can only read their own notifications.
      allow read: if isSignedIn() && resource.data.recipientId == request.auth.uid;

      // A user can create a notification if they are the sender.
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;

      // A user can only update their own notifications (e.g., to mark as read).
      allow update: if isSignedIn() && resource.data.recipientId == request.auth.uid;

      // Prevent deletion.
      allow delete: if false;
    }

    // Rules for User Profiles System
    match /users/{userId} {
      // Any signed-in user can read public user information for profiles
      allow read: if isSignedIn();

      // Only the user can create/update their own profile
      allow create, update: if isSignedIn() && request.auth.uid == userId;

      // Don't allow deletion of user profiles
      allow delete: if false;
    }
  }
}

